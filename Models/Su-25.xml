<?xml version="1.0"?>

<!-- 3D Model by Petar jedvaj -->

<PropertyList include="Su-25-bombableinclude.xml">

<!-- Model -->

	<path>Su-25.ac</path>
	
	<model>
		<usage>interior</usage>
		<path>Aircraft/Su-25/Models/Cockpit.xml</path>
	</model>
	
	<!-- Rembrandt -->
	
	<!-- Rembrandt auto switching for glass -->
	
	 <effect>
		 <inherits-from>Effects/model-transparent</inherits-from>
		 <condition>
			 <greater-than>
				 <property>sim/multiplay/generic/float[6]</property>
				 <value>9</value>
			 </greater-than>
			 <property>/sim/rendering/rembrandt/enabled</property>
		 </condition>
		 <object-name>FrontGlass</object-name>
		 <object-name>CanopyGlass</object-name>
		 <object-name>Optics</object-name>
	 </effect>
	 
     <!-- Parts invisible from internally -->
    
     <animation>
         <type>select</type>
		 <object-name>FrontGlass</object-name>
		 <object-name>CanopyGlass</object-name>
 		<condition>
             <not>
                 <property>sim/current-view/internal</property>
             </not>
         </condition>
     </animation>
	
	<!-- Lights -->
	
	<model>
		<path>Aircraft/Su-25/Models/Lights/LightPack.xml</path>
	</model>
	
    <nasal>
      <load><![CDATA[
  var root = cmdarg();
  var rootindex = root.getIndex();
  var mpPath = "/ai/models/multiplayer["~ rootindex ~"]/";

  var lightsPath = mpPath~"lightpack/"; #path to the property node, where all internal values are placed

  props.globals.initNode(mpPath~"sim/is-MP-Aircraft", 1, "BOOL");
      
  srand();
  #wherever you want to add randomization of time, use something like:  + rand()*0.05-0.025 (included by default where appropriate)


  #list of switches for lights - if you don't intend to use some light, assign it nil value instead, like whateverSwitch = nil; and you don't need to care about anything else
  #IMPORTANT: don't put / on the start of the string, it's already included in the mpPath property
  var navSwitch = mpPath~"controls/lighting/nav-lights-switch";
  var beaconSwitch = mpPath~"controls/lighting/beacon-switch";
  var strobeSwitch = mpPath~"controls/lighting/strobe-switch";
  var landingSwitch = mpPath~"controls/lighting/landing-lights-switch";
  var taxiSwitch = mpPath~"controls/lighting/taxi-light-switch";
  var probeSwitch = mpPath~"controls/lighting/probe-light-switch";
  var whiteSwitch = mpPath~"controls/lighting/white-light-switch";

  #switch this from 1 to 0 if you want to use advanced cyclical fading animation of the the nav lights instead of being stable on when the switch is on
  navStillOn = 1;


  #I need to set listener on some MP transferred properties; this doesn't seem to work well sometimes, so I mirror them to the original location on any change
  #This also simplifies work as I can use almost the same code for MP as is the local Nasal. Furthermore, I can use meaningful property names in the model XML files instead of referencing the MP properties. 
  var mpVar = {
  	new: func(propIn, propOut) {
  		var m = { parents: [mpVar] };
  		m.propIn = propIn;
  		m.propOut = propOut;
  		if(propIn==nil) return m;
  		m.value = getprop(propIn);
  		setprop(propOut, m.value);
  		return m;
  	},
  	check: func {
  		if(me.propIn==nil) return;
  		var newValue = getprop(me.propIn);
  		if(newValue != me.value) {
  			setprop(me.propOut, newValue);
  			me.value = newValue;
  			#print("value of "~me.propOut~" changed: "~newValue);
  		}
  	},
  };
  #init any property copy object needed in this array (anything you need to transfer over MP, but you are using the original paths in your xmls)
  #also used for properties you are using a listener on, or properties which you maybe want to manipulate during the <unload> 
  #if you're just using the pack, change the values according to the MP bindings in the -set.xml file
  #you don't need to delete the entries if the path is nil - it gets skipped automatically and the MP path is just ignored
  var mirrorValues = [
  	mpVar.new(mpPath~"sim/multiplay/generic/int[7]", mpPath~"sim/crashed"),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", navSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", beaconSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[1]", strobeSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[2]", landingSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", taxiSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[3]", probeSwitch),
  	mpVar.new(mpPath~"sim/multiplay/generic/int[0]", whiteSwitch),
  ];
  #loop at the default MP transfer frequency (10Hz)
  var mirrorTimer = maketimer(0.1, func {
  	foreach(var mir; mirrorValues) {
  		mir.check();
  	}
  });
  mirrorTimer.start();



  #### NAV LIGHTS ####

  #class for a periodic fade in/out animation - for flashing, use rather standard aircraft.light.new(), as in Beacon and Strobe section
  var lightCycle = {
  	#constructor
  	new: func(propSwitch, propOut) {
  		m = { parents: [lightCycle] };
  		props.globals.initNode(propOut, 0, "DOUBLE");
  		props.globals.initNode(propSwitch, 1, "BOOL");
  		m.fadeIn = 0.4 + rand()*0.05-0.025; #fade in time
  		m.fadeOut = 0.4 + rand()*0.05-0.025; #fade out time
  		m.stayOn = 1.5 + rand()*0.05-0.025; #stable on period
  		m.stayOff = 1 + rand()*0.05-0.025; #stable off period
  		m.turnOff = 0.12; #fade out time when turned off
  		m.phase = 0; #phase to be run on next timer call: 0 -> fade in, 1 -> stay on, 2 -> fade out, 3 -> stay off
  		m.cycleTimer = maketimer(0.1, func {
  			if(getprop(propSwitch)) {
  				if(m.phase == 0) {
  					interpolate(propOut, 1, m.fadeIn);
  					m.phase = 1;
  					m.cycleTimer.restart(m.fadeIn);
  				}
  				else if(m.phase == 1){
  					m.phase = 2;
  					m.cycleTimer.restart(m.stayOn);
  				}
  				else if(m.phase == 2){
  					interpolate(propOut, 0, m.fadeOut);
  					m.phase = 3;
  					m.cycleTimer.restart(m.fadeOut);
  				}
  				else if(m.phase == 3){
  					m.phase = 0;
  					m.cycleTimer.restart(m.stayOff);
  				}
  			}
  			else {
  				interpolate(propOut, 0, m.turnOff); #kills any currently ongoing interpolation
  				m.phase = 0;
  			}
  		});
  		m.cycleTimer.singleShot = 1;
  		if(propSwitch==nil) {
  			m.listen = nil;
  			return m;
  		}
  		m.listen = setlistener(propSwitch, func{m.cycleTimer.restart(0);}); #handle switch changes
  		m.cycleTimer.restart(0); #start the looping
  		return m;
  	},
  	#destructor
  	del: func {
  		if(me.listen!=nil) removelistener(me.listen);
  		me.cycleTimer.stop();
  	},
  };

  #By default, the switch property is initialized to 1 (only if no value is already assigned). Don't change the class implementation! To override this, set the property manually. You don't need to care if any other code already does it for you. 
  var navLights = nil;
  if(!navStillOn) {
  	navLights = lightCycle.new(navSwitch, lightsPath~"nav-lights-intensity");
  	### Uncomment and tune those to customize times ###
  	#navLights.fadeIn = 0.4; #fade in time 
  	#navLights.fadeOut = 0.4; #fade out time
  	#navLights.stayOn = 3 + rand()*0.05-0.025; #stable on period
  	#navLights.stayOff = 0.6; #stable off period
  	#navLights.turnOff = 0.12; #fade out time when turned off
  }


  ### BEACON ###
  var beacon = nil;
  if(beaconSwitch!=nil) {
  	props.globals.initNode(beaconSwitch, 1, "BOOL");
  	beacon = aircraft.light.new(lightsPath~"beacon-state", 
  		[0.0, 1.0 + rand()*0.05-0.025], beaconSwitch);
  }
	
	
  ### STROBE ###
  var strobe = nil;
  if(strobeSwitch!=nil) {
  	props.globals.initNode(strobeSwitch, 1, "BOOL");
  	strobe = aircraft.light.new(lightsPath~"strobe-state", 
  		[0.0, 0.87 + rand()*0.05-0.025], strobeSwitch);
  }


  ### LIGHT FADING ###

  #class for controlling fade in/out behavior - propIn is a control property (handled as a boolean) and propOut is interpolated
  #all light brightness animations in xmls depend on propOut (Rembrandt brightness, material emission, flares transparency, ...)
  var lightFadeInOut = {
  	#constructor
  	new: func(propSwitch, propOut) {
  		m = { parents: [lightFadeInOut] };
  		m.fadeIn = 0.3; #some sane defaults
  		m.fadeOut = 0.4;
  		if(propSwitch==nil) {
  			m.listen = nil;
  			return m;
  		}
  		props.globals.initNode(propSwitch, 1, "BOOL");
  		m.isOn = getprop(propSwitch);
  		props.globals.initNode(propOut, m.isOn, "DOUBLE");
  		m.listen = setlistener(propSwitch, 
  			func {
  				if(m.isOn and !getprop(propSwitch)) {
  					interpolate(propOut, 0, m.fadeOut);
  					m.isOn = 0;
  				}
  				if(!m.isOn and getprop(propSwitch)) {
  					interpolate(propOut, 1, m.fadeIn);
  					m.isOn = 1;
  				}
  			}
  		);
  		return m;
  	},
  	#destructor
  	del: func {
  		if(me.listen!=nil) removelistener(me.listen);
  	},
  };

  fadeLanding = lightFadeInOut.new(landingSwitch, lightsPath~"landing-lights-intensity");
  fadeTaxi = lightFadeInOut.new(taxiSwitch, lightsPath~"taxi-light-intensity");
  fadeProbe = lightFadeInOut.new(probeSwitch, lightsPath~"probe-light-intensity");
  fadeWhite = lightFadeInOut.new(whiteSwitch, lightsPath~"white-light-intensity");
  if(navStillOn) {
  	navLights = lightFadeInOut.new(navSwitch, lightsPath~"nav-lights-intensity");
  	navLights.fadeIn = 0.1;
  	navLights.fadeOut = 0.12;
  }
  #manipulate times if defaults don't fit your needs:
  #fadeLanding.fadeIn = 0.5;
  #fadeLanding.fadeOut = 0.8;


  ### the rest of your model load embedded Nasal code ###

      ]]>
      </load>
      <unload>
        stopFire();
        disintegrated = 0;
        removelistener(listenCrash);
      
        #prevent multiple timers and listeners from running and fighting on next connect
        #cleanly destroy MP property mirroring
        mirrorTimer.stop();
        mirrorTimer = nil;
        mirrorValues = nil;
      
        #cleanly destroy nav lights
        if(navStillOn) {
        	navLights.del();
        }
        else {
        	if(navSwitch!=nil) setprop(navSwitch, 0);
        	navLights.del();
        	if(navSwitch!=nil) navLights.cycleTimer = nil;
        	navLights = nil;
        }
      
        #cleanly destroy beacon
        if(beaconSwitch!=nil) setprop(beaconSwitch, 0);
        beacon.del();
        beacon = nil;
      
        #cleanly destroy strobe
        if(strobeSwitch!=nil) setprop(strobeSwitch, 0);
        strobe.del();
        strobe = nil;
      
        #cleanly destroy light fade in/out animation objects
        fadeLanding.del();
        fadeTaxi.del();
        fadeProbe.del();
        fadeWhite.del();
      
        ### the rest of your model unload embedded Nasal code ###
      </unload>
    </nasal>
	
	<!-- Shaders -->
	
	<animation>
		<type>shader</type>
		<shader>chrome</shader>
		<texture>Aircraft/Generic/Effects/glass_shader.png</texture>
		<object-name>FrontGlass</object-name>
		<object-name>CanopyGlass</object-name>
	</animation>
	
	<animation>
		<type>noshadow</type>
		<object-name>FrontGlass</object-name>
		<object-name>CanopyGlass</object-name>
	</animation>
	
	<!-- Effects -->
	
	<model>
		<path>Aircraft/Su-25/Models/Effects.xml</path>
	</model>
	
	<!-- MP sounds -->
	
	<sound>
		<path>Aircraft/Su-25/Sounds/MP-Sounds.xml</path>
	</sound>
	
	<!-- Payload -->
	
	<model>
		<path>Aircraft/Su-25/Models/Payload/Payload.xml</path>
	</model>
	
	<!-- Livery -->
	
	<nasal>
		<load>var livery_update = aircraft.livery_update.new("Aircraft/Su-25/Models/Liveries");
        </load>
		<unload>livery_update.stop();
        </unload>
	</nasal>
	
	<animation>
		<type>material</type>
		<object-name>Fuselage</object-name>
		<object-name>FrontArch</object-name>
		<object-name>FrontArchInner</object-name>
		<object-name>CanopyArch</object-name>
		<object-name>CanopyArchInner</object-name>
		<object-name>Cockpit</object-name>
		<object-name>Ladder</object-name>
		<object-name>LadderExtract</object-name>
		<object-name>Step</object-name>
		<object-name>Gun</object-name>
		<object-name>AntennasFuselage</object-name>
		<object-name>AntennasNose</object-name>
		<object-name>AntennasTail</object-name>
		<object-name>Chaffs</object-name>
		<object-name>FlaresLeft</object-name>
		<object-name>FlaresRight</object-name>
		<object-name>EngineLeft</object-name>
		<object-name>EngineRight</object-name>
		<object-name>IntakeLeft</object-name>
		<object-name>IntakeRight</object-name>
		<object-name>TurbineLeft</object-name>
		<object-name>TurbineRight</object-name>
		<object-name>EngineExhaustLeft</object-name>
		<object-name>EngineExhaustRight</object-name>
		<object-name>EngineNozzleLeft</object-name>
		<object-name>EngineNozzleRight</object-name>
		<object-name>EngineIntakesLeft</object-name>
		<object-name>EngineIntakesRight</object-name>
		<object-name>GearDoorNoseFront</object-name>
		<object-name>GearDoorNoseBack</object-name>
		<object-name>GearDoorFrontRight</object-name>
		<object-name>GearDoorBackRight</object-name>
		<object-name>GearDoorUpRight</object-name>
		<object-name>GearDoorFrontLeft</object-name>
		<object-name>GearDoorBackLeft</object-name>
		<object-name>GearDoorUpLeft</object-name>
		<object-name>GearBoxNose</object-name>
		<object-name>GearBoxLeft</object-name>
		<object-name>GearBoxRight</object-name>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>Fender</object-name>
		<object-name>FenderCarrier</object-name>
		<object-name>NoseStrutMain</object-name>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>
		<object-name>StrutDown2Left</object-name>
		<object-name>StrutUpLeft</object-name>
		<object-name>StrutUpFrontLeft</object-name>
		<object-name>StrutMiddle1Left</object-name>
		<object-name>StrutMiddle2Left</object-name>
		<object-name>StrutFrontLeft</object-name>
		<object-name>LeverUpLeft</object-name>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>
		<object-name>StrutDown2Right</object-name>
		<object-name>StrutUpRight</object-name>
		<object-name>StrutUpFrontRight</object-name>
		<object-name>StrutMiddle1Right</object-name>
		<object-name>StrutMiddle2Right</object-name>
		<object-name>StrutFrontRight</object-name>
		<object-name>LeverUpRight</object-name>
		<object-name>WingLeft</object-name>
		<object-name>WingRight</object-name>
		<object-name>Slat1Left</object-name>
		<object-name>Slat2Left</object-name>
		<object-name>Slat3Left</object-name>
		<object-name>Slat4Left</object-name>
		<object-name>Slat5Left</object-name>
		<object-name>Slat1Right</object-name>
		<object-name>Slat2Right</object-name>
		<object-name>Slat3Right</object-name>
		<object-name>Slat4Right</object-name>
		<object-name>Slat5Right</object-name>
		<object-name>AileronLeft</object-name>
		<object-name>AileronRight</object-name>
		<object-name>FlapsInnerLeft</object-name>
		<object-name>FlapsOuterLeft</object-name>
		<object-name>FlapsInnerRight</object-name>
		<object-name>FlapsOuterRight</object-name>
		<object-name>AirbrakeLeft</object-name>
		<object-name>AirbrakeUp1Left</object-name>
		<object-name>AirbrakeDown1Left</object-name>
		<object-name>AirbrakeUp2Left</object-name>
		<object-name>AirbrakeDown2Left</object-name>
		<object-name>AirbrakeRight</object-name>
		<object-name>AirbrakeUp1Right</object-name>
		<object-name>AirbrakeDown1Right</object-name>
		<object-name>AirbrakeUp2Right</object-name>
		<object-name>AirbrakeDown2Right</object-name>
		<object-name>LightBoxLandingLeft</object-name>
		<object-name>LightBoxLandingRight</object-name>
		<object-name>Pylon1Left</object-name>
		<object-name>Pylon2Left</object-name>
		<object-name>Pylon3Left</object-name>
		<object-name>Pylon4Left</object-name>
		<object-name>Pylon5Left</object-name>
		<object-name>Pylon1Right</object-name>
		<object-name>Pylon2Right</object-name>
		<object-name>Pylon3Right</object-name>
		<object-name>Pylon4Right</object-name>
		<object-name>Pylon5Right</object-name>
		<object-name>Tail</object-name>
		<object-name>Rudder</object-name>
		<object-name>HorizontalStabilizerLeft</object-name>
		<object-name>HorizontalStabilizerRight</object-name>
		<object-name>ElevatorLeft</object-name>
		<object-name>ElevatorRight</object-name>
		<property-base>sim/model/livery</property-base>
		<texture-prop>texture</texture-prop>
		<texture>Aircraft/Su-25/Models/Liveres/Default.png</texture>
	</animation>
	
	<!-- Animations -->
	
    <!-- Eject -->

 <animation>
	 <type>translate</type>
	 <object-name>Pilot</object-name>
	 <object-name>Seat</object-name>
	 <property>controls/eject</property>
	 <factor>20</factor>
	 <center>
		 <x-m>0</x-m>
		 <y-m>0</y-m>
		 <z-m>0</z-m>
	 </center>
	 <axis>
		 <x>0</x>
		 <y>0</y>
		 <z>1</z>
	 </axis>
 </animation>
	 
 <animation>
	 <type>select</type>
	 <object-name>CanopyGlass</object-name>
	 <object-name>CanopyArch</object-name>
	 <condition>
		 <not>
			 <property>controls/eject</property>
		 </not>
	 </condition>
 </animation>
	
	<!-- Slats -->
	
	<animation>
		<type>rotate</type>
		<object-name>Slat1Left</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-15</factor>
		<axis>
			<x1-m>1.33</x1-m>
			<y1-m>-6.64</y1-m>
			<z1-m>1.87</z1-m>
			<x2-m>1.06</x2-m>
			<y2-m>-5.76</y2-m>
			<z2-m>1.94</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat2Left</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>15</factor>
		<axis>
			<x1-m>0.75</x1-m>
			<y1-m>-4.76</y1-m>
			<z1-m>2.03</z1-m>
			<x2-m>1.05</x2-m>
			<y2-m>-5.75</y2-m>
			<z2-m>1.95</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat3Left</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-15</factor>
		<axis>
			<x1-m>0.75</x1-m>
			<y1-m>-4.75</y1-m>
			<z1-m>2.03</z1-m>
			<x2-m>0.45</x2-m>
			<y2-m>-3.80</y2-m>
			<z2-m>2.11</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat4Left</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-15</factor>
		<axis>
			<x1-m>0.47</x1-m>
			<y1-m>-3.79</y1-m>
			<z1-m>2.10</z1-m>
			<x2-m>0.05</x2-m>
			<y2-m>-2.47</y2-m>
			<z2-m>2.21</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat5Left</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>15</factor>
		<axis>
			<x1-m>-0.30</x1-m>
			<y1-m>-1.36</y1-m>
			<z1-m>2.29</z1-m>
			<x2-m>0.05</x2-m>
			<y2-m>-2.46</y2-m>
			<z2-m>2.21</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat1Right</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>15</factor>
		<axis>
			<x1-m>1.33</x1-m>
			<y1-m>6.64</y1-m>
			<z1-m>1.87</z1-m>
			<x2-m>1.06</x2-m>
			<y2-m>5.76</y2-m>
			<z2-m>1.94</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat2Right</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-15</factor>
		<axis>
			<x1-m>0.75</x1-m>
			<y1-m>4.76</y1-m>
			<z1-m>2.03</z1-m>
			<x2-m>1.05</x2-m>
			<y2-m>5.75</y2-m>
			<z2-m>1.95</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat3Right</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>15</factor>
		<axis>
			<x1-m>0.75</x1-m>
			<y1-m>4.75</y1-m>
			<z1-m>2.03</z1-m>
			<x2-m>0.45</x2-m>
			<y2-m>3.80</y2-m>
			<z2-m>2.11</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat4Right</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>15</factor>
		<axis>
			<x1-m>0.47</x1-m>
			<y1-m>3.79</y1-m>
			<z1-m>2.10</z1-m>
			<x2-m>0.05</x2-m>
			<y2-m>2.47</y2-m>
			<z2-m>2.21</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Slat5Right</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-15</factor>
		<axis>
			<x1-m>-0.30</x1-m>
			<y1-m>1.36</y1-m>
			<z1-m>2.29</z1-m>
			<x2-m>0.05</x2-m>
			<y2-m>2.46</y2-m>
			<z2-m>2.21</z2-m>
		</axis>
	</animation>
	
	<!-- Flaps -->
	
	<animation>
		<type>rotate</type>
		<object-name>FlapsOuterLeft</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>25</factor>
		<axis>
			<x1-m>1.67</x1-m>
			<y1-m>-3.71</y1-m>
			<z1-m>1.97</z1-m>
			<x2-m>1.67</x2-m>
			<y2-m>-3.65</y2-m>
			<z2-m>1.97</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>FlapsOuterRight</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-25</factor>
		<axis>
			<x1-m>1.67</x1-m>
			<y1-m>3.71</y1-m>
			<z1-m>1.97</z1-m>
			<x2-m>1.67</x2-m>
			<y2-m>3.65</y2-m>
			<z2-m>1.97</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>FlapsInnerLeft</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>25</factor>
		<axis>
			<x1-m>1.68</x1-m>
			<y1-m>-2.18</y1-m>
			<z1-m>2.05</z1-m>
			<x2-m>1.68</x2-m>
			<y2-m>-2.12</y2-m>
			<z2-m>2.05</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>FlapsInnerRight</object-name>
		<property>surface-positions/flap-pos-norm</property>
		<factor>-25</factor>
		<axis>
			<x1-m>1.68</x1-m>
			<y1-m>2.18</y1-m>
			<z1-m>2.05</z1-m>
			<x2-m>1.68</x2-m>
			<y2-m>2.12</y2-m>
			<z2-m>2.05</z2-m>
		</axis>
	</animation>
	
	<!-- Ailerons -->
	
	<animation>
		<type>rotate</type>
		<object-name>AileronLeft</object-name>
		<property>surface-positions/left-aileron-pos-norm</property>
		<factor>-20</factor>
		<axis>
			<x1-m>1.91</x1-m>
			<y1-m>-4.37</y1-m>
			<z1-m>1.96</z1-m>
			<x2-m>1.99</x2-m>
			<y2-m>-6.51</y2-m>
			<z2-m>1.83</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AileronRight</object-name>
		<property>surface-positions/right-aileron-pos-norm</property>
		<factor>20</factor>
		<axis>
			<x1-m>1.91</x1-m>
			<y1-m>4.37</y1-m>
			<z1-m>1.96</z1-m>
			<x2-m>1.99</x2-m>
			<y2-m>6.51</y2-m>
			<z2-m>1.83</z2-m>
		</axis>
	</animation>
	
	<!-- Elevators -->
	
	<animation>
		<type>rotate</type>
		<object-name>ElevatorLeft</object-name>
		<property>surface-positions/elevator-pos-norm</property>
		<factor>-20</factor>
		<axis>
			<x1-m>6.15</x1-m>
			<y1-m>-0.29</y1-m>
			<z1-m>2.17</z1-m>
			<x2-m>6.18</x2-m>
			<y2-m>-2.36</y2-m>
			<z2-m>2.30</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>ElevatorRight</object-name>
		<property>surface-positions/elevator-pos-norm</property>
		<factor>20</factor>
		<axis>
			<x1-m>6.15</x1-m>
			<y1-m>0.29</y1-m>
			<z1-m>2.17</z1-m>
			<x2-m>6.18</x2-m>
			<y2-m>2.36</y2-m>
			<z2-m>2.30</z2-m>
		</axis>
	</animation>
	
	<!-- Rudder -->
	
	<animation>
		<type>rotate</type>
		<object-name>Rudder</object-name>
		<property>surface-positions/rudder-pos-norm</property>
		<factor>30</factor>
		<axis>
			<x1-m>5.81</x1-m>
			<y1-m>0.00</y1-m>
			<z1-m>4.30</z1-m>
			<x2-m>5.59</x2-m>
			<y2-m>0.00</y2-m>
			<z2-m>2.60</z2-m>
		</axis>
	</animation>
	
	<!-- Speedbrakes -->
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeUp1Left</object-name>
		<object-name>AirbrakeUp2Left</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>80</factor>
		<axis>
			<x1-m>1.91</x1-m>
			<y1-m>-6.78</y1-m>
			<z1-m>1.90</z1-m>
			<x2-m>1.91</x2-m>
			<y2-m>-7.19</y2-m>
			<z2-m>1.89</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeUp1Right</object-name>
		<object-name>AirbrakeUp2Right</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>-80</factor>
		<axis>
			<x1-m>1.91</x1-m>
			<y1-m>6.78</y1-m>
			<z1-m>1.90</z1-m>
			<x2-m>1.91</x2-m>
			<y2-m>7.19</y2-m>
			<z2-m>1.89</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeUp2Left</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>-100</factor>
		<axis>
			<x1-m>2.50</x1-m>
			<y1-m>-6.78</y1-m>
			<z1-m>1.87</z1-m>
			<x2-m>2.50</x2-m>
			<y2-m>-7.21</y2-m>
			<z2-m>1.85</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeUp2Right</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>100</factor>
		<axis>
			<x1-m>2.50</x1-m>
			<y1-m>6.78</y1-m>
			<z1-m>1.87</z1-m>
			<x2-m>2.50</x2-m>
			<y2-m>7.21</y2-m>
			<z2-m>1.85</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeDown1Left</object-name>
		<object-name>AirbrakeDown2Left</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>-80</factor>
		<axis>
			<x1-m>1.91</x1-m>
			<y1-m>-6.78</y1-m>
			<z1-m>1.78</z1-m>
			<x2-m>1.91</x2-m>
			<y2-m>-7.19</y2-m>
			<z2-m>1.77</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeDown1Right</object-name>
		<object-name>AirbrakeDown2Right</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>80</factor>
		<axis>
			<x1-m>1.91</x1-m>
			<y1-m>6.78</y1-m>
			<z1-m>1.78</z1-m>
			<x2-m>1.91</x2-m>
			<y2-m>7.19</y2-m>
			<z2-m>1.77</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeDown2Left</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>-100</factor>
		<axis>
			<x1-m>2.50</x1-m>
			<y1-m>-7.20</y1-m>
			<z1-m>1.80</z1-m>
			<x2-m>2.50</x2-m>
			<y2-m>-6.76</y2-m>
			<z2-m>1.81</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>AirbrakeDown2Right</object-name>
		<property>surface-positions/speedbrake-pos-norm</property>
		<factor>100</factor>
		<axis>
			<x1-m>2.50</x1-m>
			<y1-m>7.20</y1-m>
			<z1-m>1.80</z1-m>
			<x2-m>2.50</x2-m>
			<y2-m>6.76</y2-m>
			<z2-m>1.81</z2-m>
		</axis>
	</animation>
	
	<!-- Engines -->
	
	<animation>
		<type>spin</type>
		<object-name>TurbineLeft</object-name>
		<property>engines/engine/n1</property>
		<factor>100</factor>
		<axis>
			<x1-m>-1.25</x1-m>
			<y1-m>-0.91</y1-m>
			<z1-m>1.88</z1-m>
			<x2-m>-1.09</x2-m>
			<y2-m>-0.91</y2-m>
			<z2-m>1.87</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>spin</type>
		<object-name>TurbineRight</object-name>
		<property>engines/engine/n1</property>
		<factor>100</factor>
		<axis>
			<x1-m>-1.25</x1-m>
			<y1-m>0.91</y1-m>
			<z1-m>1.88</z1-m>
			<x2-m>-1.09</x2-m>
			<y2-m>0.91</y2-m>
			<z2-m>1.87</z2-m>
		</axis>
	</animation>
	
	<!-- Front gear doors -->
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorNoseFront</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-90</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-3.04</x1-m>
			<y1-m>-0.26</y1-m>
			<z1-m>1.15</z1-m>
			<x2-m>-2.70</x2-m>
			<y2-m>-0.26</y2-m>
			<z2-m>1.14</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorNoseBack</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>-90</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>-90</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-2.70</x1-m>
			<y1-m>-0.26</y1-m>
			<z1-m>1.14</z1-m>
			<x2-m>-1.26</x2-m>
			<y2-m>-0.27</y2-m>
			<z2-m>1.07</z2-m>
		</axis>
	</animation>
	
	<!-- Left gear doors -->
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorUpLeft</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>70</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>0.36</x1-m>
			<y1-m>-1.20</y1-m>
			<z1-m>1.24</z1-m>
			<x2-m>-0.82</x2-m>
			<y2-m>-1.16</y2-m>
			<z2-m>1.33</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorFrontLeft</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>-70</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.27</x1-m>
			<y1-m>-0.42</y1-m>
			<z1-m>1.02</z1-m>
			<x2-m>-0.83</x2-m>
			<y2-m>-0.45</y2-m>
			<z2-m>1.06</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorBackLeft</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>70</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>70</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.27</x1-m>
			<y1-m>-0.42</y1-m>
			<z1-m>1.02</z1-m>
			<x2-m>0.61</x2-m>
			<y2-m>-0.40</y2-m>
			<z2-m>0.98</z2-m>
		</axis>
	</animation>
	
	<!-- Right gear doors -->
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorUpRight</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>-70</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>0.36</x1-m>
			<y1-m>1.20</y1-m>
			<z1-m>1.24</z1-m>
			<x2-m>-0.82</x2-m>
			<y2-m>1.16</y2-m>
			<z2-m>1.33</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorFrontRight</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>70</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.27</x1-m>
			<y1-m>0.42</y1-m>
			<z1-m>1.02</z1-m>
			<x2-m>-0.83</x2-m>
			<y2-m>0.45</y2-m>
			<z2-m>1.06</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>GearDoorBackRight</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.1</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>0.9</ind>
				<dep>-70</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>-70</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>-0.27</x1-m>
			<y1-m>0.42</y1-m>
			<z1-m>1.02</z1-m>
			<x2-m>0.61</x2-m>
			<y2-m>0.40</y2-m>
			<z2-m>0.98</z2-m>
		</axis>
	</animation>
	
	<!-- Canopy -->
	
	<animation>
		<type>rotate</type>
		<object-name>CanopyArch</object-name>
		<object-name>CanopyArchInner</object-name>
		<object-name>CanopyGlass</object-name>
		<property>/canopy/position-norm</property>
		<factor>95</factor>
		<axis>
			<x1-m>-2.95</x1-m>
			<y1-m>0.40</y1-m>
			<z1-m>2.51</z1-m>
			<x2-m>-3.66</x2-m>
			<y2-m>0.42</y2-m>
			<z2-m>2.34</z2-m>
		</axis>
	</animation>
	
	<!-- Ladder -->
	
	<animation>
		<type>rotate</type>
		<object-name>Ladder</object-name>
		<object-name>LadderExtract</object-name>
		<property>/canopy/position-norm</property>
		<factor>170</factor>
		<axis>
			<x1-m>-2.78</x1-m>
			<y1-m>-0.52</y1-m>
			<z1-m>1.70</z1-m>
			<x2-m>-2.50</x2-m>
			<y2-m>-0.52</y2-m>
			<z2-m>1.69</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>translate</type>
		<object-name>LadderExtract</object-name>
		<property>/canopy/position-norm</property>
		<factor>-0.4</factor>
		<axis>
			<x1-m>-2.68</x1-m>
			<y1-m>-0.47</y1-m>
			<z1-m>2.16</z1-m>
			<x2-m>-2.74</x2-m>
			<y2-m>-0.49</y2-m>
			<z2-m>1.73</z2-m>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>Step</object-name>
		<property>/canopy/position-norm</property>
		<factor>90</factor>
		<axis>
			<x1-m>-3.34</x1-m>
			<y1-m>-0.52</y1-m>
			<z1-m>1.93</z1-m>
			<x2-m>-3.09</x2-m>
			<y2-m>-0.52</y2-m>
			<z2-m>1.92</z2-m>
		</axis>
	</animation>
	
	<!-- Landing gear -->
	
	<!-- Nose Gear -->
	
	<animation>
		<type>select</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>Fender</object-name>
		<object-name>FenderCarrier</object-name>
		<object-name>NoseStrutMain</object-name>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>NoseStrutDown</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[0]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>Fender</object-name>
		<object-name>FenderCarrier</object-name>
		<object-name>NoseStrutMain</object-name>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<object-name>NoseStrutDown</object-name>
		<object-name>NoseStrutDown</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-100</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-100</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>-100</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>-3.09</x-m>
			<y-m>0.00</y-m>
			<z-m>1.49</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>NoseStrutUp1</object-name>
		<object-name>NoseStrutUp2</object-name>
		<property>gear/gear[0]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>80</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>80</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>80</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>-3.22</x-m>
			<y-m>0.00</y-m>
			<z-m>1.14</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<!-- Nose Gear Compression -->
	
	<animation>
		<type>rotate</type>
		<object-name>WheelNose</object-name>
		<object-name>WheelShaft</object-name>
		<object-name>WheelShaftStrut</object-name>
		<object-name>Fender</object-name>FenderCarrier
		<property>gear/gear[0]/compression-norm[0]</property>
		<factor>30</factor>
		<center>
			<x-m>-3.13</x-m>
			<y-m>0.00</y-m>
			<z-m>0.64</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>-1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelShaftStrut</object-name>FenderCarrier
		<property>gear/gear[0]/compression-norm[0]</property>
		<factor>30</factor>
		<center>
			<x-m>-3.13</x-m>
			<y-m>0.00</y-m>
			<z-m>0.64</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<!-- Left Gear -->
	
	<animation>
		<type>select</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>
		<object-name>StrutDown2Left</object-name>
		<object-name>StrutUpLeft</object-name>
		<object-name>StrutUpFrontLeft</object-name>
		<object-name>StrutMiddle1Left</object-name>
		<object-name>StrutMiddle2Left</object-name>
		<object-name>StrutFrontLeft</object-name>
		<object-name>LeverUpLeft</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[1]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>
		<object-name>StrutDown2Left</object-name>
		<object-name>StrutUpLeft</object-name>
		<object-name>StrutUpFrontLeft</object-name>
		<object-name>StrutMiddle1Left</object-name>
		<object-name>StrutMiddle2Left</object-name>
		<object-name>StrutFrontLeft</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>110</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>110</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>0.48</x-m>
			<y-m>1.07</y-m>
			<z-m>1.30</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<property>gear/gear[1]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>120</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>120</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>0.36</x1-m>
			<y1-m>-0.96</y1-m>
			<z1-m>0.54</z1-m>
			<x2-m>0.62</x2-m>
			<y2-m>-0.96</y2-m>
			<z2-m>0.46</z2-m>
		</axis>
	</animation>
	
	<!-- Left Gear Compression -->
	
	<animation>
		<type>rotate</type>
		<object-name>WheelLeft</object-name>
		<object-name>WheelShaftLeft</object-name>
		<object-name>StrutDownLeft</object-name>
		<object-name>StrutDown1Left</object-name>FenderCarrier
		<property>gear/gear[1]/compression-norm[1]</property>
		<factor>20</factor>
		<center>
			<x-m>0.12</x-m>
			<y-m>-0.96</y-m>
			<z-m>0.84</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>-1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>StrutDown2Left</object-name>FenderCarrier
		<property>gear/gear[1]/compression-norm[1]</property>
		<factor>20</factor>
		<center>
			<x-m>0.52</x-m>
			<y-m>-0.96</y-m>
			<z-m>1.71</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<!-- Right Gear -->
	
	<animation>
		<type>select</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>
		<object-name>StrutDown2Right</object-name>
		<object-name>StrutUpRight</object-name>
		<object-name>StrutUpFrontRight</object-name>
		<object-name>StrutMiddle1Right</object-name>
		<object-name>StrutMiddle2Right</object-name>
		<object-name>StrutFrontRight</object-name>
		<object-name>LeverUpRight</object-name>
		<condition>
			<greater-than>
				<property>gear/gear[2]/position-norm</property>
				<value>0</value>
			</greater-than>
		</condition>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>
		<object-name>StrutDown2Right</object-name>
		<object-name>StrutUpRight</object-name>
		<object-name>StrutUpFrontRight</object-name>
		<object-name>StrutMiddle1Right</object-name>
		<object-name>StrutMiddle2Right</object-name>
		<object-name>StrutFrontRight</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-110</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-110</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<center>
			<x-m>0.48</x-m>
			<y-m>-1.07</y-m>
			<z-m>1.30</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>-1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<property>gear/gear[2]/position-norm</property>
		<interpolation>
			<entry>
				<ind>0.0</ind>
				<dep>-120</dep>
			</entry>
			<entry>
				<ind>0.5</ind>
				<dep>-120</dep>
			</entry>
			<entry>
				<ind>0.6</ind>
				<dep>0</dep>
			</entry>
			<entry>
				<ind>1.0</ind>
				<dep>0</dep>
			</entry>
		</interpolation>
		<axis>
			<x1-m>0.36</x1-m>
			<y1-m>0.96</y1-m>
			<z1-m>0.54</z1-m>
			<x2-m>0.62</x2-m>
			<y2-m>0.96</y2-m>
			<z2-m>0.46</z2-m>
		</axis>
	</animation>
	
	<!-- Right Gear Compression -->
	
	<animation>
		<type>rotate</type>
		<object-name>WheelRight</object-name>
		<object-name>WheelShaftRight</object-name>
		<object-name>StrutDownRight</object-name>
		<object-name>StrutDown1Right</object-name>FenderCarrier
		<property>gear/gear[2]/compression-norm[2]</property>
		<factor>20</factor>
		<center>
			<x-m>0.12</x-m>
			<y-m>-0.96</y-m>
			<z-m>0.84</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>-1</y>
			<z>0</z>
		</axis>
	</animation>
	
	<animation>
		<type>rotate</type>
		<object-name>StrutDown2Right</object-name>FenderCarrier
		<property>gear/gear[2]/compression-norm[2]</property>
		<factor>20</factor>
		<center>
			<x-m>0.52</x-m>
			<y-m>-0.96</y-m>
			<z-m>1.71</z-m>
		</center>
		<axis>
			<x>0</x>
			<y>1</y>
			<z>0</z>
		</axis>
	</animation>
	
</PropertyList>
